# This Docker Compose is for the source environment.  It works with the client Dockerfile to
# set up a local development server that will automatically refresh for you.
# To use this source environment:
# $ docker-compose down -v && docker-compose up --build
#
# You can change the build environment by updating the client command and webserver volume

version: "2"

services:
    api:
        build: ./api
        command: ./startup.sh # Start the application with PM2. This watches files and restarts the application.
        container_name: api
        depends_on:
            - mongodb
        environment:
            database_hostname: $database_hostname
            NODE_ENV: $NODE_ENV
        ports: # Expose port 9000 for development purpose only.
            - 9000:9000
        volumes:
            - /usr/src/app/node_modules # Saves the node modules so it does not have to re-install
            - ./api/:/usr/src/app # Mounts the host folder(s) onto the docker container for live development

    client:
        build: ./client
        container_name: client
        environment:
            NODE_ENV: $NODE_ENV
        volumes:
            - /usr/src/app/node_modules # Saves the node modules so it does not have to re-install
            - ./client:/usr/src/app # Mounts the host folder(s) onto the docker container for live development
            - /usr/src/app/dist # Exposes the /dist folder for integration, staging, and production environments

    mongodb:
        container_name: mongodb
        image: mongo:3.0

    webserver:
        container_name: webserver
        build: ./webserver
        depends_on:
            - api
            - client
        environment:
            NODE_ENV: $NODE_ENV
        ports:
            - 80:80
        volumes_from:
            - client
